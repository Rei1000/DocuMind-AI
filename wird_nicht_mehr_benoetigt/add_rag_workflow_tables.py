#!/usr/bin/env python3
"""
Migrationsskript: RAG-System und intelligente Workflow-Tabellen

F√ºgt die neuen Tabellen f√ºr das RAG-System und die intelligente
Workflow-Engine hinzu:
- DocumentIndex: F√ºr Embeddings und semantische Suche
- RAGQuery: F√ºr RAG-Query-Historie
- QMSTask: F√ºr intelligente Workflow-Tasks  
- TaskComment: F√ºr Task-Kommentare
- WorkflowTemplate: F√ºr wiederverwendbare Workflows
- WorkflowExecution: F√ºr Workflow-Ausf√ºhrungsprotokoll

Ausf√ºhrung:
    python backend/scripts/add_rag_workflow_tables.py
"""

import sys
import os
from pathlib import Path

# Backend-Pfad hinzuf√ºgen
backend_path = Path(__file__).parent.parent
sys.path.insert(0, str(backend_path))

from sqlalchemy import create_engine, text
from app.database import get_db, engine
from app.models import Base

def add_rag_workflow_tables():
    """F√ºgt RAG- und Workflow-Tabellen hinzu"""
    print("üîÑ Starte Migration: RAG-System und intelligente Workflows")
    print("üìä Datenbank: qms_mvp.db")
    
    try:
        # Alle Tabellen erstellen (neue werden hinzugef√ºgt, bestehende ignoriert)
        Base.metadata.create_all(bind=engine)
        
        print("‚úÖ Migration erfolgreich abgeschlossen!")
        print("\nüìã Neue Tabellen:")
        
        # Pr√ºfe, welche Tabellen existieren
        with engine.connect() as conn:
            # RAG-Tabellen
            print("üß† RAG-System:")
            
            try:
                result = conn.execute(text("SELECT COUNT(*) FROM document_indexes"))
                count = result.scalar()
                print(f"  ‚úÖ document_indexes ({count} Eintr√§ge)")
            except:
                print("  ‚ùå document_indexes (nicht erstellt)")
            
            try:
                result = conn.execute(text("SELECT COUNT(*) FROM rag_queries"))
                count = result.scalar()
                print(f"  ‚úÖ rag_queries ({count} Eintr√§ge)")
            except:
                print("  ‚ùå rag_queries (nicht erstellt)")
            
            # Workflow-Tabellen
            print("\nüöÄ Intelligente Workflows:")
            
            try:
                result = conn.execute(text("SELECT COUNT(*) FROM qms_tasks"))
                count = result.scalar()
                print(f"  ‚úÖ qms_tasks ({count} Eintr√§ge)")
            except:
                print("  ‚ùå qms_tasks (nicht erstellt)")
            
            try:
                result = conn.execute(text("SELECT COUNT(*) FROM task_comments"))
                count = result.scalar()
                print(f"  ‚úÖ task_comments ({count} Eintr√§ge)")
            except:
                print("  ‚ùå task_comments (nicht erstellt)")
            
            try:
                result = conn.execute(text("SELECT COUNT(*) FROM workflow_templates"))
                count = result.scalar()
                print(f"  ‚úÖ workflow_templates ({count} Eintr√§ge)")
            except:
                print("  ‚ùå workflow_templates (nicht erstellt)")
            
            try:
                result = conn.execute(text("SELECT COUNT(*) FROM workflow_executions"))
                count = result.scalar()
                print(f"  ‚úÖ workflow_executions ({count} Eintr√§ge)")
            except:
                print("  ‚ùå workflow_executions (nicht erstellt)")
        
        print("\nüéâ Das KI-QMS ist jetzt bereit f√ºr RAG-Chat und intelligente Workflows!")
        print("\nüìã N√§chste Schritte:")
        print("1. Backend neustarten: ./restart_backend.sh")
        print("2. Dokumente indexieren: http://localhost:8501 ‚Üí RAG-Chat ‚Üí 'Alle Dokumente indexieren'")
        print("3. Ersten Workflow testen: 'Bluetooth Modul nicht mehr lieferbar'")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Migration fehlgeschlagen: {e}")
        return False

if __name__ == "__main__":
    success = add_rag_workflow_tables()
    sys.exit(0 if success else 1) 