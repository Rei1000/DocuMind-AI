"""
KI-QMS Datenmodelle (SQLAlchemy ORM)

Dieses Modul definiert alle Datenmodelle f√ºr das KI-gest√ºtzte 
Qualit√§tsmanagementsystem. Die Modelle repr√§sentieren die Datenbankstrukturen
f√ºr das 13-Interessensgruppen-System und QMS-spezifische Entit√§ten.

Hauptkomponenten:
- InterestGroup: 13 praxisorientierte Stakeholder-Gruppen
- User: Benutzer mit Rollen und Abteilungszuordnung
- UserGroupMembership: Many-to-Many Beziehung User ‚Üî Groups
- Document: QMS-Dokumente mit 14 spezifischen Typen
- Norm: Compliance-Standards (ISO 13485, MDR, etc.)
- Equipment: Ger√§te-Management mit Kalibrierungs-Tracking
- Calibration: Kalibrierungsprotokoll mit Audit-Trail

Technologie:
- SQLAlchemy ORM f√ºr Datenbankoperationen
- Pydantic f√ºr Datenvalidierung
- Enum f√ºr typisierte Auswahlwerte
- JSON-Felder f√ºr flexible Datenstrukturen

Autoren: KI-QMS Entwicklungsteam
Version: 1.0.0 (MVP Phase 1)
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, ForeignKey, Enum, JSON, Float
from sqlalchemy.orm import relationship
from datetime import datetime
import enum
from .database import Base

# === ENUMS ===
class DocumentStatus(enum.Enum):
    """
    Dokumentenstatus f√ºr QM-Workflow nach ISO 13485.
    
    Vierstufiger Freigabe-Workflow:
    - DRAFT: Entwurf in Bearbeitung
    - REVIEWED: Fachlich gepr√ºft, wartet auf QM-Freigabe  
    - APPROVED: QM-freigegeben, offiziell g√ºltig
    - OBSOLETE: Nicht mehr g√ºltig, archiviert
    """
    DRAFT = "draft"          # ‚úèÔ∏è Entwurf - wird erstellt/√ºberarbeitet
    REVIEWED = "reviewed"    # üîç Gepr√ºft - fachliche Pr√ºfung abgeschlossen
    APPROVED = "approved"    # ‚úÖ Freigegeben - QM-Freigabe erhalten
    OBSOLETE = "obsolete"    # üóëÔ∏è Obsolet - nicht mehr g√ºltig

class DocumentType(enum.Enum):
    """
    Dokumenttypen f√ºr QMS-spezifische Dokumentenverwaltung.
    
    Definiert 14+ standardisierte Dokumenttypen nach ISO 13485 und MDR
    f√ºr strukturierte Dokumentenverwaltung im Medizinprodukte-QMS.
    
    Kategorien:
    - Kerndokumente: QM_MANUAL, SOP, WORK_INSTRUCTION
    - Formulare & Vorlagen: FORM, USER_MANUAL, SERVICE_MANUAL
    - Analyse & Validierung: RISK_ASSESSMENT, VALIDATION_PROTOCOL
    - Prozesse: CALIBRATION_PROCEDURE, AUDIT_REPORT, CAPA_DOCUMENT
    - Training & Spezifikationen: TRAINING_MATERIAL, SPECIFICATION
    - Normen & Standards: STANDARD_NORM, REGULATION, GUIDANCE_DOCUMENT
    - Flexibilit√§t: OTHER f√ºr kundenspezifische Typen
    """
    QM_MANUAL = "QM_MANUAL"                      # Qualit√§tsmanagement-Handbuch (Hauptdokument)
    SOP = "SOP"                                  # Standard Operating Procedure
    WORK_INSTRUCTION = "WORK_INSTRUCTION"        # Arbeitsanweisung (detaillierte Schritte)
    FORM = "FORM"                                # Formular/Vorlage f√ºr Dokumentation
    USER_MANUAL = "USER_MANUAL"                  # Benutzerhandbuch f√ºr Medizinprodukte
    SERVICE_MANUAL = "SERVICE_MANUAL"            # Servicehandbuch f√ºr Wartung
    RISK_ASSESSMENT = "RISK_ASSESSMENT"          # Risikoanalyse nach ISO 14971
    VALIDATION_PROTOCOL = "VALIDATION_PROTOCOL"  # Validierungsprotokoll (IQ/OQ/PQ)
    CALIBRATION_PROCEDURE = "CALIBRATION_PROCEDURE" # Kalibrierverfahren f√ºr Equipment
    AUDIT_REPORT = "AUDIT_REPORT"                # Audit-Berichte (intern/extern)
    CAPA_DOCUMENT = "CAPA_DOCUMENT"              # CAPA-Dokumentation (Corrective Action)
    TRAINING_MATERIAL = "TRAINING_MATERIAL"      # Schulungsunterlagen und -protokolle
    SPECIFICATION = "SPECIFICATION"              # Spezifikationen und Anforderungen
    STANDARD_NORM = "STANDARD_NORM"              # Standards und Normen (ISO, IEC, DIN, EN)
    REGULATION = "REGULATION"                    # Regulatorische Dokumente (MDR, FDA CFR)
    GUIDANCE_DOCUMENT = "GUIDANCE_DOCUMENT"      # Leitf√§den und Guidance-Dokumente
    PROCESS = "PROCESS"                          # Prozessdokumente (Flussdiagramme, Workflows)
    PROMPT_TEST = "PROMPT_TEST"                  # Prompt-Test f√ºr Qualit√§tssicherung
    OTHER = "OTHER"                              # Sonstige/kundenspezifische Dokumente

class EquipmentStatus(enum.Enum):
    ACTIVE = "active"
    MAINTENANCE = "maintenance"
    RETIRED = "retired"

# === KERN-MODELLE: 13-INTERESSENSGRUPPEN-SYSTEM ===

class InterestGroup(Base):
    """
    Interessensgruppen-Modell f√ºr das 13-Stakeholder-System.
    
    Repr√§sentiert die organisatorischen Einheiten des QMS, von internen
    Teams (Einkauf, QM, Entwicklung) bis zu externen Stakeholdern 
    (Auditoren, Lieferanten). Jede Gruppe hat spezifische Berechtigungen
    und KI-Funktionalit√§ten.
    
    Gesch√§ftslogik:
    - Granulare Berechtigungssteuerung √ºber permissions (JSON-Array)
    - KI-Funktionalit√§ten zugeschnitten auf Gruppenbed√ºrfnisse
    - Unterscheidung zwischen internen/externen Gruppen
    - Soft-Delete √ºber is_active f√ºr Audit-Trail
    
    Relationships:
    - users: Many-to-Many √ºber UserGroupMembership
    """
    __tablename__ = "interest_groups"
    
    id = Column(Integer, primary_key=True, index=True, 
                comment="Eindeutige ID der Interessensgruppe")
    name = Column(String(100), unique=True, nullable=False, index=True,
                  comment="Vollst√§ndiger Name der Interessensgruppe")
    code = Column(String(50), unique=True, nullable=False, index=True,
                  comment="Eindeutiger Code f√ºr API-Zugriff und Referenzierung")
    description = Column(Text, nullable=True,
                        comment="Detaillierte Beschreibung der Aufgaben und Verantwortlichkeiten")
    group_permissions = Column(Text, comment="JSON-String mit spezifischen Gruppen-Berechtigungen (z.B. 'supplier_evaluation', 'audit_management')")
    
    def get_group_permissions_list(self):
        """Gruppen-Permissions als Python-Liste"""
        try:
            import json
            if hasattr(self, '_group_permissions_value') and self._group_permissions_value:
                return json.loads(self._group_permissions_value)
            elif hasattr(self, 'group_permissions') and getattr(self, 'group_permissions', None):
                return json.loads(getattr(self, 'group_permissions'))
            return []
        except (json.JSONDecodeError, TypeError, AttributeError):
            return []
    ai_functionality = Column(Text, comment="Beschreibung der verf√ºgbaren KI-Funktionen f√ºr diese Gruppe")
    typical_tasks = Column(Text, comment="Typische Aufgaben und Anwendungsf√§lle der Gruppe")
    is_external = Column(Boolean, default=False, nullable=False,
                        comment="True f√ºr externe Stakeholder (Auditoren, Lieferanten)")
    is_active = Column(Boolean, default=True, nullable=False,
                      comment="Soft-Delete Flag: False = deaktiviert")
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False,
                       comment="Zeitpunkt der Erstellung")
    
    # Relationships
    user_memberships = relationship("UserGroupMembership", back_populates="interest_group")

class User(Base):
    """
    Benutzer-Modell f√ºr Authentifizierung und Rollenverwaltung.
    
    Repr√§sentiert Benutzer des QMS-Systems mit ihren Rollen, Abteilungen
    und Authentifizierungsdaten. Unterst√ºtzt verschiedene Benutzertypen
    von internen Mitarbeitern bis zu externen Auditoren.
    
    Sicherheitsfeatures:
    - Verschl√ºsselte Passwort-Speicherung (hashed_password)
    - Eindeutige Username und Email-Adressen
    - Soft-Delete f√ºr Audit-Trail
    - Rollen-basierte Zugriffskontrolle
    
    Relationships:
    - interest_groups: Many-to-Many √ºber UserGroupMembership
    - created_documents: One-to-Many zu Document
    - approved_documents: One-to-Many zu Document
    """
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige Benutzer-ID")
    email = Column(String(100), unique=True, index=True, nullable=False,
                  comment="Email-Adresse (eindeutig, f√ºr Benachrichtigungen)")
    full_name = Column(String(200), nullable=False,
                      comment="Vollst√§ndiger Name (Vor- und Nachname)")
    employee_id = Column(String(50), unique=True,
                        comment="Mitarbeiternummer")
    organizational_unit = Column(String(100), comment="Organisatorische Einheit/Abteilung (unabh√§ngig von funktionalen Interest Groups)")
    hashed_password = Column(String(255), comment="Gehashtes Passwort (bcrypt empfohlen)")
    # === INDIVIDUELLE BERECHTIGUNGEN ===
    individual_permissions = Column(Text, comment="JSON-String mit individuellen User-Berechtigungen (z.B. Abteilungsleiter-Rechte, Sonderzug√§nge)")
    is_department_head = Column(Boolean, default=False, nullable=False,
                               comment="Abteilungsleiter-Status f√ºr Freigabe-Berechtigungen")
    approval_level = Column(Integer, default=1, comment="Freigabe-Level: 1=Standard, 2=Teamleiter, 3=Abteilungsleiter, 4=QM-Manager, 5=System-Admin")
    is_active = Column(Boolean, default=True, nullable=False,
                      comment="Account-Status: False = deaktiviert")
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False,
                       comment="Zeitpunkt der Account-Erstellung")
    
    # Relationships
    group_memberships = relationship("UserGroupMembership", back_populates="user", foreign_keys="UserGroupMembership.user_id")
    documents_created = relationship("Document", back_populates="creator", foreign_keys="Document.creator_id")
    calibrations_responsible = relationship("Calibration", back_populates="responsible_user")

class UserGroupMembership(Base):
    """
    Zuordnungstabelle f√ºr Many-to-Many Beziehung User ‚Üî InterestGroup.
    
    **ERWEITERT f√ºr Multiple Abteilungen pro User:**
    Erm√∂glicht flexible Zuordnung von Benutzern zu mehreren Interessensgruppen
    mit **individuellen Approval-Levels** je Abteilung. Unterst√ºtzt komplexe
    Organisationsstrukturen wo ein User verschiedene Rollen hat.
    
    **Beispiel:**
    ```
    User: reiner@company.com
    ‚îú‚îÄ‚îÄ QM-Abteilung (Level 2 - Teamleiter) 
    ‚îú‚îÄ‚îÄ Service (Level 3 - Abteilungsleiter)
    ‚îî‚îÄ‚îÄ Entwicklung (Level 1 - Mitarbeiter)
    ```
    
    Gesch√§ftslogik:
    - Ein User kann mehreren Gruppen angeh√∂ren
    - **Verschiedene Approval-Levels** in verschiedenen Gruppen
    - Zeitstempel f√ºr Audit-Trail und Historisierung
    - Deaktivierung ohne Datenverlust m√∂glich
    
    Anwendungsf√§lle:
    - QM-Manager in mehreren Produktgruppen
    - Entwickler in verschiedenen Projektteams  
    - Abteilungsleiter mit Mitarbeiter-Status in anderen Bereichen
    """
    __tablename__ = "user_group_memberships"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige ID der Zuordnung")
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True,
                     comment="Referenz auf User.id")
    interest_group_id = Column(Integer, ForeignKey("interest_groups.id"), nullable=False, index=True,
                              comment="Referenz auf InterestGroup.id")
    
    # === ERWEITERTE FELDER F√úR MULTIPLE ABTEILUNGEN ===
    role_in_group = Column(String(50), comment="Spezifische Rolle des Users in dieser Gruppe (z.B. 'Teamleiter', 'Fachexperte')")
    approval_level = Column(Integer, default=1, nullable=False,
                           comment="Freigabe-Level in dieser Abteilung: 1=Mitarbeiter, 2=Teamleiter, 3=Abteilungsleiter, 4=QM-Manager")
    is_department_head = Column(Boolean, default=False, nullable=False, 
                               comment="Abteilungsleiter-Status in dieser spezifischen Gruppe")
    
    # === AUDIT & VERWALTUNG ===
    is_active = Column(Boolean, default=True, nullable=False,
                      comment="Aktiv-Status der Zuordnung")
    joined_at = Column(DateTime, default=datetime.utcnow, nullable=False,
                      comment="Zeitpunkt des Beitritts zur Gruppe")
    assigned_by_id = Column(Integer, ForeignKey("users.id"), nullable=True,
                           comment="System Admin der diese Zuordnung erstellt hat")
    notes = Column(Text, comment="Bemerkungen zur Zuordnung (z.B. 'Tempor√§r f√ºr Projekt XY')")
    
    # Relationships
    user = relationship("User", back_populates="group_memberships", foreign_keys=[user_id])
    interest_group = relationship("InterestGroup", back_populates="user_memberships")
    assigned_by = relationship("User", foreign_keys=[assigned_by_id], post_update=True)
    
    def __repr__(self):
        return f"<UserGroupMembership(user_id={self.user_id}, group_id={self.interest_group_id}, level={self.approval_level})>"

# === DOKUMENTEN-MODELL: QMS-SPEZIFISCHE DOKUMENTENVERWALTUNG ===

class Document(Base):
    """
    Dokumenten-Modell f√ºr QMS-Dokumentenverwaltung.
    
    Zentrale Entit√§t f√ºr die Verwaltung aller QMS-relevanten Dokumente
    mit 14 spezialisierten Dokumenttypen, Versionskontrolle und 
    Freigabe-Workflow nach ISO 13485 Anforderungen.
    
    Features:
    - 14 QMS-spezifische Dokumenttypen
    - 4-stufiger Freigabe-Workflow (DRAFT ‚Üí REVIEW ‚Üí APPROVED ‚Üí OBSOLETE)
    - Vollst√§ndiger Audit-Trail (Ersteller, Genehmiger, Zeitstempel)
    - Versionsverwaltung mit Semantic Versioning
    - Physische Dateispeicherung mit Hash-Validierung
    - RAG-ready Textindexierung
    
    Compliance:
    - ISO 13485 konforme Dokumentenkontrolle
    - MDR-konforme Dokumentation
    - FDA 21 CFR Part 820 Anforderungen
    """
    __tablename__ = "documents"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige Dokument-ID")
    title = Column(String(255), nullable=False, index=True,
                  comment="Dokumententitel (sollte eindeutig sein)")
    document_number = Column(String(50), unique=True, nullable=False,
                            comment="Eindeutige Dokumentennummer")
    document_type = Column(Enum(DocumentType), default=DocumentType.OTHER,
                          comment="Dokumenttyp aus DocumentType Enum")
    version = Column(String(20), nullable=False, default="1.0",
                    comment="Versionsnummer (Semantic Versioning empfohlen)")
    status = Column(Enum(DocumentStatus), default=DocumentStatus.DRAFT, index=True,
                   comment="Dokumentstatus aus DocumentStatus Enum")
    content = Column(Text, comment="Detaillierte Beschreibung des Dokumentinhalts")
    
    # === PHYSISCHE DATEI-MANAGEMENT ===
    file_path = Column(String(500), comment="Relativer Pfad zur physischen Datei")
    file_name = Column(String(500), comment="Originaler Dateiname (erweitert f√ºr lange Namen)")
    file_size = Column(Integer, comment="Dateigr√∂√üe in Bytes")
    file_hash = Column(String(64), comment="SHA-256 Hash f√ºr Integrit√§t")
    mime_type = Column(String(100), comment="MIME-Type der Datei")
    
    # === RAG-VORBEREITUNG ===
    extracted_text = Column(Text, comment="Extrahierter Text f√ºr RAG/AI-Indexierung")
    keywords = Column(String(1000), comment="Extrahierte Schl√ºsselw√∂rter")
    
    # === VERSIONIERUNG ===
    parent_document_id = Column(Integer, ForeignKey("documents.id"), comment="Referenz auf Vorg√§ngerversion")
    version_notes = Column(Text, comment="√Ñnderungshinweise/Release Notes")
    
    # === QM-SPEZIFISCHE METADATEN ===
    tags = Column(String(500), comment="JSON string f√ºr Flexibilit√§t")
    remarks = Column(Text, comment="QM-Manager Hinweise/Bemerkungen")
    chapter_numbers = Column(String(200), comment="Normkapitel (z.B. '4.2.3, 7.5.1')")
    
    # Norm-spezifische Felder
    compliance_status = Column(String(50), comment="Compliance-Status f√ºr Normen: ZU_BEWERTEN, EINGEHALTEN, TEILWEISE, NICHT_ZUTREFFEND")
    priority = Column(String(20), comment="Priorit√§t f√ºr Normen: HOCH, MITTEL, NIEDRIG")
    scope = Column(Text, comment="Anwendungsbereich/Relevanz f√ºr Normen")
    
    # === WORKFLOW & FREIGABEN ===
    reviewed_by_id = Column(Integer, ForeignKey("users.id"), comment="Pr√ºfer (Abteilungsleiter)")
    reviewed_at = Column(DateTime, comment="Zeitpunkt der Pr√ºfung")
    approved_by_id = Column(Integer, ForeignKey("users.id"), comment="Genehmiger (QM-Manager)")
    approved_at = Column(DateTime, comment="Zeitpunkt der Freigabe")
    
    # === STATUS-CHANGE TRACKING ===
    status_changed_by_id = Column(Integer, ForeignKey("users.id"), comment="User der letzten Status-√Ñnderung")
    status_changed_at = Column(DateTime, default=datetime.utcnow, comment="Zeitpunkt der letzten Status-√Ñnderung")
    status_comment = Column(Text, comment="Kommentar zur Status-√Ñnderung")
    
    # === UPLOAD-METHODEN FELDER ===
    upload_method = Column(String(10), default='ocr', comment="Upload-Verarbeitungsmethode: ocr oder visio")
    validation_status = Column(String(50), comment="Validierungsstatus f√ºr Visio-Methode: VERIFIED, REVIEW_REQUIRED")
    structured_analysis = Column(Text, comment="JSON-strukturierte Analyse-Daten der Visio-Methode")
    prompt_used = Column(Text, comment="Verwendeter Prompt bei Visio-Verarbeitung")
    ocr_text_preview = Column(Text, comment="OCR-Text-Vorschau f√ºr Benutzer-Review")
    
    # Metadata
    creator_id = Column(Integer, ForeignKey("users.id"), comment="Ersteller des Dokuments (User.id)")
    created_at = Column(DateTime, default=datetime.utcnow, comment="Zeitpunkt der Erstellung")
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, comment="Zeitpunkt der letzten Aktualisierung")
    
    # Relationships
    creator = relationship("User", back_populates="documents_created", foreign_keys=[creator_id])
    reviewed_by = relationship("User", foreign_keys=[reviewed_by_id])
    approved_by = relationship("User", foreign_keys=[approved_by_id])
    status_changed_by = relationship("User", foreign_keys=[status_changed_by_id])
    parent_document = relationship("Document", remote_side=[id], back_populates="child_documents")
    child_documents = relationship("Document", back_populates="parent_document")
    norm_mappings = relationship("DocumentNormMapping", back_populates="document")
    status_history = relationship("DocumentStatusHistory", back_populates="document", order_by="DocumentStatusHistory.changed_at.desc()")

# === NORMEN & COMPLIANCE ===

class Norm(Base):
    """
    Normen-Modell f√ºr Compliance-Standards und regulatorische Anforderungen.
    
    Verwaltet alle relevanten Normen, Standards und Verordnungen f√ºr
    das Medizinprodukte-QMS. Zentrale Referenz f√ºr Compliance-Pr√ºfungen
    und Gap-Analysen.
    
    Normenkategorien:
    - QMS: ISO 13485, ISO 9001
    - REGULATION: MDR, FDA 21 CFR Part 820
    - RISK_MANAGEMENT: ISO 14971
    - SOFTWARE: IEC 62304
    - CLINICAL: ISO 14155, ICH-GCP
    - BIOCOMPATIBILITY: ISO 10993
    
    Compliance-Features:
    - Versionstracking f√ºr Norm-Updates
    - Effective Date f√ºr √úbergangsfristen
    - Mandatory Flag f√ºr Pflicht vs. freiwillige Standards
    - Authority f√ºr herausgebende Organisation
    """
    __tablename__ = "norms"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige Norm-ID")
    name = Column(String(100), unique=True, nullable=False, index=True,
                 comment="Offizielle Normbezeichnung (z.B. 'ISO 13485:2016')")
    full_title = Column(String(500), nullable=False,
                       comment="Vollst√§ndiger Titel der Norm")
    version = Column(String(20), comment="Norm-Version/Jahr (z.B. '2016', '2019')")
    description = Column(Text, comment="Zusammenfassung des Anwendungsbereichs")
    authority = Column(String(100), comment="Herausgebende Organisation (ISO, IEC, FDA, EU Commission)")
    effective_date = Column(DateTime, comment="Datum des Inkrafttretens")
    created_at = Column(DateTime, default=datetime.utcnow, comment="Zeitpunkt der Erfassung im System")
    
    # Relationships
    document_mappings = relationship("DocumentNormMapping", back_populates="norm")
    calibration_requirements = relationship("CalibrationRequirement", back_populates="norm")

# === KALIBRIERUNGSMANAGEMENT ===

class Equipment(Base):
    """
    Equipment-Modell f√ºr Ger√§te- und Asset-Management.
    
    Verwaltet alle kalibrierpflichtigen Ger√§te, Messausr√ºstungen und
    kritischen Assets mit automatischer Kalibrierungs-Fristen√ºberwachung.
    
    Asset-Kategorien:
    - measuring_device: Pr√§zisionsmessger√§te (Messschieber, Waagen)
    - laboratory_scale: Laborwaagen und Analysenger√§te  
    - temperature_monitor: Klima√ºberwachung und -pr√ºfung
    - pressure_gauge: Druckmessger√§te und -pr√ºfst√§nde
    - test_equipment: Elektrische und mechanische Pr√ºfger√§te
    - production_tool: Kritische Produktionswerkzeuge
    
    Kalibrierungs-Features:
    - Automatische Berechnung von Kalibrierungsterminen
    - Intervall-Management nach Ger√§tetyp
    - √úberf√§lligkeits-Tracking f√ºr Compliance
    - Standort-Verfolgung f√ºr Asset-Management
    """
    __tablename__ = "equipment"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige Equipment-ID")
    name = Column(String(255), nullable=False, index=True,
                 comment="Ger√§tename/Bezeichnung")
    equipment_number = Column(String(50), unique=True, nullable=False, index=True,
                              comment="Eindeutige Seriennummer des Ger√§ts")
    manufacturer = Column(String(100), comment="Hersteller des Ger√§ts")
    model = Column(String(100), comment="Modellbezeichnung")
    serial_number = Column(String(100), unique=True, nullable=False, index=True,
                          comment="Eindeutige Seriennummer des Ger√§ts")
    location = Column(String(255), comment="Aktueller Standort des Ger√§ts")
    status = Column(Enum(EquipmentStatus), default=EquipmentStatus.ACTIVE, index=True,
                   comment="Betriebsstatus (active, maintenance, retired)")
    
    # Kalibrierung
    calibration_interval_months = Column(Integer, comment="Kalibrierungsintervall in Monaten")
    last_calibration = Column(DateTime, comment="Datum der letzten Kalibrierung")
    next_calibration = Column(DateTime, index=True, comment="Datum der n√§chsten f√§lligen Kalibrierung")
    
    created_at = Column(DateTime, default=datetime.utcnow, comment="Zeitpunkt der Registrierung im System")
    
    # Relationships
    calibrations = relationship("Calibration", back_populates="equipment")

class Calibration(Base):
    """
    Kalibrierungs-Modell f√ºr Kalibrierungsprotokoll und Audit-Trail.
    
    Dokumentiert alle durchgef√ºhrten Kalibrierungen mit vollst√§ndiger
    R√ºckverfolgbarkeit. Erf√ºllt ISO 17025 Anforderungen f√ºr
    Kalibrierungsdokumentation.
    
    Kalibrierungs-Ergebnisse:
    - passed: Erfolgreich, alle Toleranzen eingehalten
    - failed: Fehlgeschlagen, au√üerhalb der Toleranzen  
    - conditional: Bedingt bestanden, mit Einschr√§nkungen
    
    Compliance-Features:
    - Eindeutige Zertifikatsnummern f√ºr R√ºckverfolgbarkeit
    - Abweichungsdokumentation f√ºr Qualit√§tsbewertung
    - Automatische Equipment-Status-Updates
    - Audit-Trail f√ºr regulatorische Pr√ºfungen
    """
    __tablename__ = "calibrations"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige Kalibrierungs-ID")
    equipment_id = Column(Integer, ForeignKey("equipment.id"), nullable=False, index=True,
                         comment="Referenz auf das kalibrierte Equipment")
    calibration_date = Column(DateTime, nullable=False, index=True,
                             comment="Datum der durchgef√ºhrten Kalibrierung")
    next_due_date = Column(DateTime, nullable=False, comment="Geplanter Termin f√ºr n√§chste Kalibrierung")
    calibration_results = Column(Text, comment="JSON string mit Messwerten")
    certificate_path = Column(String(500), comment="Pfad zum Kalibrierungs-Zertifikat (PDF)")
    
    # Status
    status = Column(String(50), default="valid", comment="valid, expired, due")
    responsible_user_id = Column(Integer, ForeignKey("users.id"), comment="Durchf√ºhrende Person/Organisation")
    
    created_at = Column(DateTime, default=datetime.utcnow, comment="Zeitpunkt der Protokoll-Erstellung")
    
    # Relationships
    equipment = relationship("Equipment", back_populates="calibrations")
    responsible_user = relationship("User", back_populates="calibrations_responsible")

# === MAPPING TABELLEN ===

class DocumentNormMapping(Base):
    """Verkn√ºpfung zwischen Dokumenten und Normen"""
    __tablename__ = "document_norm_mappings"
    
    id = Column(Integer, primary_key=True, index=True)
    document_id = Column(Integer, ForeignKey("documents.id"))
    norm_id = Column(Integer, ForeignKey("norms.id"))
    relevant_clauses = Column(String(200))                  # z.B. "4.2.3, 7.5.1"
    compliance_notes = Column(Text)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    document = relationship("Document", back_populates="norm_mappings")
    norm = relationship("Norm", back_populates="document_mappings")

class CalibrationRequirement(Base):
    """Kalibrierungsanforderungen aus Normen"""
    __tablename__ = "calibration_requirements"
    
    id = Column(Integer, primary_key=True, index=True)
    norm_id = Column(Integer, ForeignKey("norms.id"))
    equipment_type = Column(String(100))                    # z.B. "Messschieber", "Waage"
    required_interval_months = Column(Integer)
    requirements_text = Column(Text)
    
    # Relationships
    norm = relationship("Norm", back_populates="calibration_requirements")

class DocumentStatusHistory(Base):
    """
    Audit-Trail f√ºr Dokumentstatus-√Ñnderungen.
    
    Vollst√§ndige Nachverfolgung aller Status-Wechsel f√ºr Compliance
    nach ISO 13485 Anforderungen. Unterst√ºtzt Rollback-Funktionalit√§t
    und forensische Analyse.
    
    Workflow-Tracking:
    - Automatische Erfassung bei jedem Status-Change
    - User-Identifikation f√ºr Verantwortlichkeit
    - Kommentar-System f√ºr Begr√ºndungen
    - Unver√§nderlicher Audit-Trail
    """
    __tablename__ = "document_status_history"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige History-Eintrag-ID")
    document_id = Column(Integer, ForeignKey("documents.id"), nullable=False, index=True,
                        comment="Referenz auf das Dokument")
    old_status = Column(Enum(DocumentStatus), comment="Vorheriger Status")
    new_status = Column(Enum(DocumentStatus), nullable=False,
                       comment="Neuer Status nach √Ñnderung")
    changed_by_id = Column(Integer, ForeignKey("users.id"), nullable=False,
                          comment="User der die √Ñnderung durchgef√ºhrt hat")
    changed_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True,
                       comment="Zeitpunkt der Status-√Ñnderung")
    comment = Column(Text, comment="Kommentar/Begr√ºndung f√ºr Status-√Ñnderung")
    
    # Relationships
    document = relationship("Document", back_populates="status_history")
    changed_by = relationship("User")

# === RAG & KI-ERWEITERTE MODELLE ===

class DocumentIndex(Base):
    """
    Index-Modell f√ºr RAG-System und KI-basierte Dokumentensuche.
    
    Verwaltet Embeddings und Metadaten f√ºr semantische Suche in QMS-Dokumenten.
    Optimiert f√ºr lokale Vector-Database (ChromaDB) Integration.
    
    Features:
    - Chunk-basierte Textindexierung
    - Embedding-Versionierung  
    - Search-Performance-Tracking
    - RAG-Query-Historie
    """
    __tablename__ = "document_indexes"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige Index-ID")
    document_id = Column(Integer, ForeignKey("documents.id"), nullable=False, index=True,
                        comment="Referenz auf indexiertes Dokument")
    chunk_text = Column(Text, nullable=False,
                       comment="Textinhalt des Chunks")
    chunk_index = Column(Integer, nullable=False,
                        comment="Position des Chunks im Dokument")
    embedding_model = Column(String(100), default="all-MiniLM-L6-v2",
                           comment="Verwendetes Embedding-Model")
    indexed_at = Column(DateTime, default=datetime.utcnow, nullable=False,
                       comment="Zeitpunkt der Indexierung")
    search_count = Column(Integer, default=0,
                         comment="Anzahl der Suchtreffer f√ºr Analytics")
    
    # Relationships
    document = relationship("Document")

class RAGQuery(Base):
    """
    RAG-Query-Historie f√ºr Analytics und Verbesserung.
    
    Protokolliert alle RAG-Anfragen f√ºr Performance-Monitoring,
    Query-Optimierung und User-Experience-Verbesserung.
    """
    __tablename__ = "rag_queries"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    query_text = Column(Text, nullable=False,
                       comment="Benutzer-Anfrage")
    response_text = Column(Text,
                          comment="KI-generierte Antwort")
    confidence_score = Column(Float,
                            comment="Konfidenz-Score der Antwort")
    processing_time = Column(Float,
                           comment="Verarbeitungszeit in Sekunden")
    sources_used = Column(Text,
                         comment="JSON mit verwendeten Quellen")
    provider_used = Column(String(50),
                          comment="Verwendeter KI-Provider")
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    
    # Relationships
    user = relationship("User")

# === INTELLIGENTE WORKFLOW-MODELLE ===

class TaskStatus(str, Enum):
    """Task-Status f√ºr intelligente Workflows"""
    OPEN = "open"              # üìã Neu erstellt, noch nicht begonnen
    IN_PROGRESS = "in_progress" # üîÑ In Bearbeitung
    WAITING = "waiting"         # ‚è≥ Wartet auf Input/Freigabe
    COMPLETED = "completed"     # ‚úÖ Abgeschlossen
    CANCELLED = "cancelled"     # ‚ùå Storniert

class QMSTask(Base):
    """
    Task-Modell f√ºr intelligente Workflow-Engine.
    
    Zentrale Entit√§t f√ºr alle automatisch generierten und manuellen
    QMS-Aufgaben. Unterst√ºtzt rollenbasierte Zuweisung, Abh√§ngigkeiten
    und Compliance-Tracking.
    
    Features:
    - Automatische Workflow-Generierung
    - Rollenbasierte Zuweisungen
    - Abh√§ngigkeiten zwischen Tasks
    - SLA-Monitoring
    - Approval-Workflows
    """
    __tablename__ = "qms_tasks"
    
    id = Column(Integer, primary_key=True, index=True,
                comment="Eindeutige Task-ID")
    title = Column(String(255), nullable=False,
                  comment="Task-Titel")
    description = Column(Text,
                        comment="Detaillierte Task-Beschreibung")
    status = Column(String(20), default="open", index=True,
                   comment="Aktueller Task-Status")
    priority = Column(String(20), default="MEDIUM",
                     comment="Priorit√§t: CRITICAL, HIGH, MEDIUM, LOW")
    
    # Zuweisungen
    assigned_group_id = Column(Integer, ForeignKey("interest_groups.id"), index=True,
                              comment="Zugewiesene Interest Group")
    assigned_user_id = Column(Integer, ForeignKey("users.id"), nullable=True, index=True,
                             comment="Spezifisch zugewiesener User")
    created_by = Column(Integer, ForeignKey("users.id"), nullable=False,
                       comment="Task-Ersteller")
    
    # Zeitmanagement
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    due_date = Column(DateTime, index=True,
                     comment="F√§lligkeitsdatum")
    started_at = Column(DateTime,
                       comment="Zeitpunkt des Bearbeitungsbeginns")
    completed_at = Column(DateTime,
                         comment="Zeitpunkt der Fertigstellung")
    
    # Workflow-Integration
    workflow_id = Column(String(100), index=True,
                        comment="ID des ausl√∂senden Workflows")
    workflow_context = Column(Text,
                             comment="JSON mit Workflow-Kontext")
    parent_task_id = Column(Integer, ForeignKey("qms_tasks.id"),
                           comment="√úbergeordneter Task f√ºr Abh√§ngigkeiten")
    
    # Dokumentation
    required_documents = Column(Text,
                               comment="JSON-Liste ben√∂tigter Dokumente")
    prerequisites = Column(Text,
                          comment="JSON-Liste von Voraussetzungen")
    completion_notes = Column(Text,
                             comment="Notizen zur Fertigstellung")
    
    # Approval
    approval_needed = Column(Boolean, default=False,
                           comment="Freigabe durch Vorgesetzten erforderlich")
    approved_by_id = Column(Integer, ForeignKey("users.id"),
                           comment="Freigebender User")
    approved_at = Column(DateTime,
                        comment="Freigabezeitpunkt")
    
    # Relationships
    assigned_group = relationship("InterestGroup")
    assigned_user = relationship("User", foreign_keys=[assigned_user_id])
    creator = relationship("User", foreign_keys=[created_by])
    approver = relationship("User", foreign_keys=[approved_by_id])
    parent_task = relationship("QMSTask", remote_side=[id], back_populates="subtasks")
    subtasks = relationship("QMSTask", back_populates="parent_task")
    comments = relationship("TaskComment", back_populates="task")

class TaskComment(Base):
    """
    Kommentar-System f√ºr Tasks.
    
    Erm√∂glicht Kommunikation und Dokumentation w√§hrend
    der Task-Bearbeitung mit Audit-Trail.
    """
    __tablename__ = "task_comments"
    
    id = Column(Integer, primary_key=True, index=True)
    task_id = Column(Integer, ForeignKey("qms_tasks.id"), nullable=False, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    comment_text = Column(Text, nullable=False)
    is_internal = Column(Boolean, default=True,
                        comment="Interne Notiz oder √∂ffentlicher Kommentar")
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    
    # Relationships
    task = relationship("QMSTask", back_populates="comments")
    user = relationship("User")

class WorkflowTemplate(Base):
    """
    Template-System f√ºr wiederverwendbare Workflows.
    
    Erm√∂glicht Konfiguration und Versionierung von
    Standard-Workflows f√ºr h√§ufige Szenarien.
    """
    __tablename__ = "workflow_templates"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False, unique=True)
    description = Column(Text)
    trigger_type = Column(String(50), nullable=False, index=True,
                         comment="Workflow-Trigger-Typ")
    template_config = Column(Text,
                            comment="JSON-Konfiguration des Templates")
    is_active = Column(Boolean, default=True)
    created_by = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    
    # Relationships
    creator = relationship("User")

class WorkflowExecution(Base):
    """
    Workflow-Ausf√ºhrungsprotokoll.
    
    Protokolliert alle ausgef√ºhrten Workflows f√ºr
    Analytics und Prozessoptimierung.
    """
    __tablename__ = "workflow_executions"
    
    id = Column(Integer, primary_key=True, index=True)
    workflow_id = Column(String(100), unique=True, nullable=False, index=True)
    template_id = Column(Integer, ForeignKey("workflow_templates.id"))
    trigger_message = Column(Text,
                            comment="Ausl√∂sende Nachricht")
    trigger_context = Column(Text,
                            comment="JSON mit Trigger-Kontext")
    started_by = Column(Integer, ForeignKey("users.id"), nullable=False)
    started_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    completed_at = Column(DateTime,
                         comment="Zeitpunkt der Workflow-Fertigstellung")
    status = Column(String(50), default="active",
                   comment="active, completed, cancelled, failed")
    tasks_created = Column(Integer, default=0,
                          comment="Anzahl erstellter Tasks")
    
    # Relationships
    template = relationship("WorkflowTemplate")
    starter = relationship("User") 