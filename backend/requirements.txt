# =====================================================
# KI-QMS Backend Requirements - Production Ready v2.0.0
# =====================================================
# Last Updated: 2024-12-20
# Python Version: 3.12+
# 
# This file specifies exact versions for reproducible builds
# and security compliance in production environments.

# ===================
# CORE WEB FRAMEWORK
# ===================
fastapi==0.110.0              # Modern, fast (high-performance) web framework
uvicorn[standard]==0.25.0     # Lightning-fast ASGI server with worker process management
starlette==0.32.0             # Lightweight ASGI framework/toolkit (FastAPI dependency)

# ===================
# DATABASE & ORM
# ===================
sqlalchemy==2.0.25           # The Python SQL toolkit and ORM
sqlalchemy[asyncio]==2.0.25  # Async database support for high performance
# Note: sqlite3 is built-in to Python, no separate installation needed
# Production: Consider PostgreSQL with asyncpg for scalability

# ===================
# DATA VALIDATION & SERIALIZATION
# ===================
pydantic==2.5.3              # Data validation and settings using Python type annotations
pydantic[email]==2.5.3       # Email validation support
email-validator==2.1.0.post1 # Email address validation (pydantic dependency)

# ===================
# AUTHENTICATION & SECURITY
# ===================
python-jose[cryptography]==3.3.0  # JSON Web Token implementation with cryptographic signing
passlib[bcrypt]==1.7.4            # Password hashing library with bcrypt support
cryptography==41.0.8              # Cryptographic recipes and primitives
python-multipart==0.0.6           # Parser for multipart/form-data (file uploads)

# ===================
# ENVIRONMENT & CONFIGURATION
# ===================
python-dotenv==1.0.0         # Load environment variables from .env file
pydantic-settings==2.1.0     # Settings management using Pydantic

# ===================
# FILE HANDLING & TEXT EXTRACTION
# ===================
aiofiles==23.2.0             # Async file I/O operations for better performance
python-magic==0.4.27         # File type detection via libmagic
PyPDF2==3.0.1               # PDF text extraction and manipulation
python-docx==1.1.0          # Word document (.docx) parsing and generation
openpyxl==3.1.2             # Excel 2010 xlsx/xlsm/xltx/xltm files support
markdown==3.5.2             # Markdown parsing and HTML generation

# ===================
# EXTERNAL INTEGRATIONS
# ===================
notion-client==2.3.0         # Official Notion API client
httpx==0.26.0               # Modern HTTP client for Python 3.6+
requests==2.31.0            # HTTP library for Python (fallback/sync operations)

# ===================
# DATE & TIME UTILITIES
# ===================
python-dateutil==2.8.2      # Extensions to the standard Python datetime module

# ===================
# LOGGING & MONITORING
# ===================
rich==13.7.0                # Rich text and beautiful formatting in the terminal
structlog==23.2.0           # Structured logging for Python
python-json-logger==2.0.7   # JSON formatter for Python logging

# ===================
# DEVELOPMENT & TESTING
# ===================
pytest==7.4.4               # Simple powerful testing with Python
pytest-asyncio==0.23.2      # Pytest support for asyncio
pytest-cov==4.1.0           # Coverage plugin for pytest
pytest-mock==3.12.0         # Thin-wrapper around mock for easier use with pytest
faker==22.0.0               # Generate fake data for testing

# ===================
# CODE QUALITY & FORMATTING
# ===================
black==23.12.1              # The uncompromising Python code formatter
ruff==0.1.8                 # An extremely fast Python linter and code formatter
mypy==1.8.0                 # Optional static typing for Python
pre-commit==3.6.0           # Git hook scripts for code quality

# ===================
# DOCUMENTATION
# ===================
mkdocs==1.5.3               # Static site generator for project documentation
mkdocs-material==9.5.3      # Material Design theme for MkDocs
mkdocstrings[python]==0.24.0 # Automatic documentation from sources

# ===================
# PRODUCTION DEPLOYMENT
# ===================
gunicorn==21.2.0            # Python WSGI HTTP Server for UNIX (alternative to uvicorn)
prometheus-client==0.19.0   # Official Python client for Prometheus monitoring
sentry-sdk[fastapi]==1.39.2 # Error tracking and performance monitoring

# ===================
# DATA PROCESSING & ANALYSIS
# ===================
pandas==2.1.4               # Powerful data analysis and manipulation library
numpy==1.26.2               # Fundamental package for array computing with Python
pydantic-extra-types==2.4.1 # Extra Pydantic types for specialized use cases

# ===================
# ASYNC & CONCURRENCY
# ===================
anyio==4.2.0                # High level async/await framework (asyncio alternative)
# Note: asyncio is built-in to Python 3.4+, no separate installation needed

# ===================
# CACHING & PERFORMANCE
# ===================
cachetools==5.3.2           # Extensible memoizing collections and decorators
redis==5.0.1                # Redis client for Python (optional caching backend)

# ===================
# VALIDATION & SCHEMAS
# ===================
jsonschema==4.20.0          # Implementation of JSON Schema validation for Python
python-magic==0.4.27        # File type identification using libmagic

# ===================
# SECURITY & COMPLIANCE
# ===================
safety==2.3.5               # Checks installed packages for known security vulnerabilities
bandit==1.7.5               # Security linter for Python code

# ===================
# AI/ML CAPABILITIES (Optional - Future Enhancement)
# ===================
# Uncomment these when implementing AI features in Phase 2+
# sentence-transformers==2.2.2    # State-of-the-art sentence embeddings
# openai==1.6.1                   # OpenAI GPT API client
# langchain==0.0.350              # LLM application framework
# chromadb==0.4.18                # Vector database for embeddings
# tiktoken==0.5.2                 # Fast BPE tokeniser for use with OpenAI's models

# ===================
# DATABASE MIGRATIONS (Optional)
# ===================
# alembic==1.13.1                 # Database migration tool for SQLAlchemy

# ===================
# DEVELOPMENT NOTES
# ===================
# 
# Version Selection Strategy:
# - All versions are pinned to specific releases for reproducible builds
# - Security patches are applied by updating to latest patch versions
# - Minor updates are evaluated for breaking changes before updating
# - Major updates require full testing cycle and compatibility verification
#
# Production Considerations:
# - Consider switching from SQLite to PostgreSQL for production
# - Add proper logging aggregation (ELK stack, Fluentd, etc.)
# - Implement proper secrets management (Azure Key Vault, AWS Secrets Manager)
# - Add monitoring and alerting (Prometheus, Grafana, PagerDuty)
# - Consider containerization with Docker for deployment
#
# Security Best Practices:
# - Regularly audit dependencies with `safety check`
# - Use `bandit` for security linting
# - Keep dependencies updated with security patches
# - Monitor for CVEs in used packages
# - Use virtual environments and never install globally
#
# Performance Optimization:
# - Consider using `asyncpg` driver for PostgreSQL in production
# - Implement connection pooling for database connections
# - Use Redis for caching frequent queries
# - Consider async workers for CPU-intensive tasks
# - Monitor and profile application performance regularly
#
# To update dependencies safely:
# 1. pip-tools can help generate lock files: pip install pip-tools
# 2. Create requirements.in with loose versions
# 3. Run pip-compile to generate exact versions
# 4. Test thoroughly before deploying updates
#
# Container Usage:
# - Use multi-stage Docker builds for smaller production images
# - Consider using Python slim or alpine base images
# - Cache pip dependencies in Docker layers for faster builds
# - Use .dockerignore to exclude unnecessary files
#
# Development Setup:
# pip install -r requirements.txt
# pip install -r requirements-dev.txt  # Additional dev dependencies
# pre-commit install                   # Install git hooks
# 
# Production Setup:
# pip install --no-deps -r requirements.txt  # Install without dependency resolution
# 
# ===================================================== 